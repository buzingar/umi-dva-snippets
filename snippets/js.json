{
  "import": {
    "prefix": "gn-import-from",
    "body": "import ${2:moduleName} from '${1:module}'$0;"
  },
  "importDestructing": {
    "prefix": "gn-import-destruct",
    "body": "import { $2 } from '${1:module}'$0;"
  },
  "import PropTypes": {
    "prefix": "gn-import-proptypes",
    "body": "import PropTypes from 'prop-types';"
  },
  "exportDefault": {
    "prefix": "gn-export-default",
    "body": "export default $1$0"
  },
  "forEach": {
    "prefix": "gn-array-foreach",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "map": {
    "prefix": "gn-array-map",
    "body": ["${1:array}.map(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "filter": {
    "prefix": "gn-array-filter",
    "body": ["${1:array}.filter(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "find": {
    "prefix": "gn-array-find",
    "body": ["${1:array}.find(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "findIndex": {
    "prefix": "gn-array-findIndex",
    "body": ["${1:array}.findIndex(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "some": {
    "prefix": "gn-array-some",
    "body": ["${1:array}.some(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "every": {
    "prefix": "gn-array-every",
    "body": ["${1:array}.every(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "destructProps": {
    "prefix": "gn-props-destruct",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "gn-state-destruct",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "consoleLog": {
    "prefix": "gn-console-log",
    "body": "console.log('$1:', ${2:string})"
  },
  "consoleInfo": {
    "prefix": "gn-console-info",
    "body": "console.info('$1:', ${2:string})"
  },
  "consoleWarn": {
    "prefix": "gn-console-warn",
    "body": "console.warn('$1:', ${2:string})"
  },
  "consoleError": {
    "prefix": "gn-console-error",
    "body": "console.error('$1:', ${2:string})"
  },
  "consoleString": {
    "prefix": "gn-console-string",
    "body": "console.log('%s $1', ${2:string})"
  },
  "consoleColor": {
    "prefix": "gn-console-color",
    "body": "console.log('%c %s $1 $1', 'background-color: #0ff', ${2:string}, ${3:string})"
  },
  "consolePlaceholder": {
    "prefix": "gn-console-placeholders",
    "body": [
      "console.log('字符串 %s', 'string')",
      "console.log('整数 %d，值须为整数值，不能为字符串', 100)",
      "console.log('整数 %i，值须为整数值，不能为字符串', 100)",
      "console.log('浮点数 %f，不能为字符串', 100.0)",
      "console.log('对象的链接: %o ', 'http://www.baidu.com')",
      "console.log('%c css格式字符串', 'color: red')"
    ],
    "description": "console placeholders"
  },
  "consoleTimeStartEnd": {
    "prefix": "gn-console-time-start&end",
    "body": [
      "console.time('time')",
      "// 成对使用，用于统计时间",
      "$0",
      "console.timeEnd('time')"
    ],
    "description": "time 和 timeEnd 一般放在一起用，传入一个参数用来标识起始位置用于统计时间"
  },
  "consoleTable": {
    "prefix": "gn-console-table",
    "body": "console.table(${0:array})",
    "description": "将复合类型的数据转为表格显示"
  },
  "consoleDir": {
    "prefix": "gn-console-dir",
    "body": "console.dir(${0:object})",
    "description": "按便于阅读和打印的形式将对象打印"
  },
  "consoleAssert": {
    "prefix": "gn-console-assert",
    "body": [
      "const val = 1",
      "console.assert(val === 1, '等于 1')",
      "console.assert(val !== 1, '不等于 1') // 当表达式为 false 时，则显示错误信息",
      "console.log('代码会继续往下执行')"
    ],
    "description": "断言，用来进行条件判断。当表达式为 false 时，则显示错误信息，不会中断程序执行。"
  },
  "consoleGroup": {
    "prefix": "gn-console-group",
    "body": [
      "console.group('分组 1')",
      "console.log('分组 1-1111')",
      "console.log('分组 1-2222')",
      "console.log('分组 1-3333')",
      "console.groupEnd()"
    ],
    "description": "分组输出信息，可以用鼠标折叠/展开"
  },
  "checkZhCNName": {
    "prefix": "gn-check-zhname",
    "body": [
      "export const checkName = (name, pattern, msg) => {",
      "\tlet ptn = pattern || /^[\\u4E00-\\u9FA5\\uf900-\\ufa2d·\\s\\w]{2,64}$/;",
      "\tconst result = ptn.test(name);",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check zh-cn names pattern"
  },
  "checkPhone": {
    "prefix": "gn-check-phone",
    "body": [
      "export const checkPhone = (phone, msg) => {",
      "\tconst pattern = /^1[3456789]d{9}$/;",
      "\tconst result = pattern.test(phone)",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check cn phone pattern"
  },
  "checkSelfPattern": {
    "prefix": "gn-check-selfPattern",
    "body": [
      "export const checkVal = (val, pattern, msg) => {",
      "\tconst result = pattern.test(val)",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check with user provides pattern"
  },
  "regexp": {
    "prefix": "gn-util-regexp",
    "body": [
      "export const regExp = {",
      "\temail: '^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$',",
      "\taccount: '^[a-zA-Z][a-zA-Z0-9_]{4,15}$',",
      "\tpassword: '^[a-zA-Z]\\w{5,17}$',",
      "\tstrongPWD: '^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$',",
      "\tchineseChr: '^[\\u4e00-\\u9fa5]{0,}$',",
      "}"
    ]
  },
  "learnRegExp": {
    "prefix": "gn-knowledge-regexp",
    "body": [
      "```",
      "i:执行对大小写不敏感的匹配。",
      "g:执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。",
      "m:执行多行匹配。",
      "",
      "[abc]:查找方括号之间的任何字符。",
      "[^abc]:查找任何不在方括号之间的字符。",
      "[0-9]:查找任何从 0 至 9 的数字。",
      "[a-z]:查找任何从小写 a 到小写 z 的字符。",
      "[A-Z]:查找任何从大写 A 到大写 Z 的字符。",
      "[A-z]:查找任何从大写 A 到小写 z 的字符。",
      "[adgk]:查找给定集合内的任何字符。",
      "[^adgk]:查找给定集合外的任何字符。",
      "(red|blue|green):查找任何指定的选项。",
      "",
      ".:查找单个字符，除了换行和行结束符。",
      "\\w:查找单词字符。",
      "\\W:查找非单词字符。",
      "\\d:查找数字。",
      "\\D:查找非数字字符。",
      "\\s:查找空白字符。",
      "\\S:查找非空白字符。",
      "",
      "n+ :匹配任何包含至少一个 n 的字符串。",
      "n* :匹配任何包含零个或多个 n 的字符串。",
      "n?:匹配任何包含零个或一个 n 的字符串。",
      "n{X}:匹配包含 X 个 n 的序列的字符串。",
      "n{X,Y}:匹配包含 X 至 Y 个 n 的序列的字符串。",
      "n{X,}:匹配包含至少 X 个 n 的序列的字符串。",
      "n$:匹配任何结尾为 n 的字符串。",
      "^n:匹配任何开头为 n 的字符串。",
      "?=n:匹配任何其后紧接指定字符串 n 的字符串。",
      "?!n:匹配任何其后没有紧接指定字符串 n 的字符串。",
      "```",
      "",
      "var re = /^(d{3})-(d{3,8})$/;",
      "re.exec('010-12345');",
      "re.exec('010 12345');",
      "",
      "// 非贪婪匹配，尽可能少匹配，加个?",
      "var re = /^(\\d+?)(0*)$/;",
      "var re = /^(\\d+)(0*)$/;",
      "",
      "// 全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。",
      "const reg = /[a-zA-Z]+Script/g;",
      "const str = 'JavaScript, VBScript, JScript and ECMAScript';",
      "reg.exec(str);"
    ]
  },
  "checkId": {
    "prefix": "gn-check-idno-func",
    "body": [
      "export const checkCode = (val, msg) => {",
      "\tvar p = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;",
      "\tvar factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];",
      "\tvar parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];",
      "\tvar code = val.substring(17);",
      "",
      "\tif (p.test(val)) {",
      "\t\tvar sum = 0;",
      "\t\tfor (var i = 0; i < 17; i++) {",
      "\t\t\tsum += val[i] * factor[i];",
      "\t\t}",
      "\t\tif (parity[sum % 11] == code.toUpperCase()) {",
      "\t\t\treturn true;",
      "\t\t}",
      "\t}",
      "",
      "\tif (msg) {",
      "\t\tthrow msg;",
      "\t}",
      "",
      "\treturn false;",
      "}"
    ],
    "description": "check chinese IdNo"
  },
  "checkEmptyOrBeyond": {
    "prefix": "gn-check-emptyOrBeyond",
    "body": [
      "export const checkEmptyOrBeyond = (val, msg, maxLen) => {",
      "\tif (val) {",
      "\t\tif (maxLen && isNaN(+maxLen)) {",
      "\t\t\tthrow 'The third argument is not a NUMBER.'",
      "\t\t}",
      "\t\tif (val.trim() === '' || (maxLen && val.length > +maxLen)) {",
      "\t\t\tif (msg) {",
      "\t\t\t\tthrow msg;",
      "\t\t\t}",
      "\t\t\treturn true;",
      "\t\t}",
      "\t\treturn false;",
      "\t}",
      "\tthrow msg;",
      "}"
    ],
    "description": ""
  },
  "debounce": {
    "prefix": "gn-util-debounce",
    "body": [
      "export const debounce = (func, wait, immediate = true) => {",
      "\tlet timeout;",
      "\t",
      "\treturn function () {",
      "\t\tlet context = this;",
      "\t\tlet args = arguments;",
      "\t\t",
      "\t\tif (timeout) clearTimeout(timeout);",
      "\t\tif (immediate) {",
      "\t\t\tconst callNow = !timeout;",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\ttimeout = null;",
      "\t\t\t}, wait);",
      "\t\t\tif (callNow) func.apply(context, args);",
      "\t\t} else {",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\tfunc.apply(context, args);",
      "\t\t\t}, wait);",
      "\t\t}",
      "\t};",
      "};"
    ],
    "description": "debounce immediate or delay"
  },
  "throttle": {
    "prefix": "gn-util-throttle",
    "body": [
      "export const throttle = (func, wait , type) => {",
      "\tlet previous = 0;",
      "\tlet timeout;",
      "",
      "\treturn function() {",
      "\t\tlet context = this;",
      "\t\tlet args = arguments;",
      "",
      "\t\tif (type === 'timestamp') {",
      "\t\t\tlet now = Date.now();",
      "\t\t\tif (now - previous > wait) {",
      "\t\t\t\tfunc.apply(context, args);",
      "\t\t\t\tprevious = now;",
      "\t\t\t}",
      "\t\t\treturn;",
      "\t\t}",
      "",
      "\t\tif (!timeout) {",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\ttimeout = null;",
      "\t\t\t\tfunc.apply(context, args)",
      "\t\t\t}, wait)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "throttle timestamp or interval"
  },
  "packScript": {
    "prefix": "gn-util-pack",
    "body": [
      "// make sure the dir which the file in is sibling with src",
      "const fs = require('fs');",
      "const path = require('path');",
      "const tar = require('tar');",
      "const pkg = require('../package');",
      "const umirc = require('../.umirc');",
      "",
      "const distName = `${pkg.name}.tar.gz`;",
      "const outputPath = path.resolve(process.cwd(), umirc.outputPath || './dist');",
      "",
      "tar.c({ gzip: true, cwd: outputPath }, fs.readdirSync(outputPath))",
      "\t.pipe(fs.createWriteStream(distName))",
      "\t.on('finish', () => {",
      "\t\tconst openPath = path.resolve(process.cwd());",
      "\t\tconsole.log(`打包完成，快速打开包所在目录请执行命令：open ${openPath}`);",
      "\t});"
    ],
    "description": "pack script"
  },
  "maxItemOfArray": {
    "prefix": "gn-util-maxInArray",
    "body": [
      "export const maxItem = arr => Math.max(...arr);",
      "export const maxItemOfArray = arr => arr.sort((a, b) => b - a)[0];"
    ],
    "description": "获取数组中的最大数字"
  },
  "areAllEqual": {
    "prefix": "gn-util-arrayItemEqual",
    "body": [
      "export const areAllEqual = array => array.every(item => item === array[0]);"
    ],
    "description": "检查数组的所有项是否相等"
  },
  "averageOf": {
    "prefix": "gn-util-average",
    "body": [
      "export const averageOf = (…numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;"
    ],
    "description": "求给定数字的平均值"
  },
  "reverseString": {
    "prefix": "gn-util-reverse",
    "body": ["export const reverseString = str => […str].reverse().join('');"],
    "description": "反转一个字符串"
  },
  "sumOf": {
    "prefix": "gn-util-sum",
    "body": [
      "export const sumOf = (…numbers) => numbers.reduce((a, b) => a + b, 0);"
    ],
    "description": "求给定数字的和"
  },
  "findAndReplace": {
    "prefix": "gn-util-replaceStr",
    "body": [
      "export const findAndReplace = (string, wordToFind, wordToReplace) => string.split(wordToFind).join(wordToReplace);"
    ],
    "description": "在字符串中查找给定的单词，并替换为另一个单词"
  },
  "RGBToHex": {
    "prefix": "gn-util-transcolor",
    "body": [
      "export const RGBToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');"
    ],
    "description": "将RGB模式下的颜色转换为十六进制"
  },
  "shuffle": {
    "prefix": "gn-util-shuffle",
    "body": [
      "export const shuffle = ([…array]) => {",
      "\t let m = array.length;",
      "",
      "\t while(m){",
      "\t\t const i = Math.floor(Math.random() * m);",
      "\t\t [array[m], array[i]] = [array[i], array[m]]",
      "\t }",
      "\t return array",
      "};"
    ],
    "description": "随机播放播放项目"
  },
  "removeFalseValues": {
    "prefix": "gn-util-rmFalseVal",
    "body": [
      "export const removeFalseValues = arr => arr.filter(item => item);"
    ],
    "description": "从数组中删除false值，包括false，undefined，NaN，empty"
  },
  "removeDuplicatedValues": {
    "prefix": "gn-util-rmDuplicatedVal",
    "body": [
      "export const removeDuplicatedValues = array => […new Set(array)];"
    ],
    "description": "从数组中删除重复的项"
  },
  "getTimeFromDate": {
    "prefix": "gn-util-time",
    "body": [
      "export const getTimeFromDate = date => date.toTimeString().slice(0, 8);"
    ],
    "description": "以日期对象的字符串形式返回时间"
  },
  "capitalizeAllWords": {
    "prefix": "gn-util-capitalize",
    "body": [
      "export const capitalizeAllWords = str => str.replace(/\b[a-z]/g, char => char.toUpperCase());"
    ],
    "description": "将字符串中所有单词的第一个字母大写"
  },
  "getDayDiff": {
    "prefix": "gn-util-getDayDiff",
    "body": [
      "export const getDayDiff = (date1, date2) => ((date2 - date1) / (1000 * 3600 * 24));"
    ],
    "description": "返回两个日期之间以天为单位的差值"
  },
  "radianToDegree": {
    "prefix": "gn-util-radianToDegree",
    "body": [
      "export const radianToDegree = radian => (radian * 180.0) / Math.PI;"
    ],
    "description": "把弧度转换成角度"
  },
  "isValidJSON": {
    "prefix": "gn-util-valid-json",
    "body": [
      "export const isValidJSON = string => {",
      "\t try {",
      "\t\t JSON.parse(string);",
      "\t\t return true;",
      "\t } catch (error) {",
      "\t\t return false",
      "\t }",
      "}"
    ],
    "description": "检查给定字符串是否是有效的JSON"
  },
  "toWords": {
    "prefix": "gn-util-toWords",
    "body": [
      "export const toWords = (string, pattern = /[^a-zA-Z-]+/) => string.split(pattern).filter(item => item);"
    ],
    "description": "将给定的字符串转换为单词数组"
  },
  "scrollToTop": {
    "prefix": "gn-util-scrollToTop",
    "body": [
      "const scrollToTop = () => {",
      "\tconst t = document.documentElement.scrollTop || document.body.scrollTop;",
      "\tif (t > 0) {",
      "\t\twindow.requestAnimationFrame(scrollToTop);",
      "\t\twindow.scrollTo(0, t — t / 8);",
      "\t}",
      "};"
    ],
    "description": "位于长页面的底部，并且想快速向上滚动至顶部"
  },
  "isValidNumber": {
    "prefix": "gn-util-isValidNumber",
    "body": [
      "export const isValidNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) === n;"
    ],
    "description": "验证数字是否有效"
  },
  "makeId": {
    "prefix": "gn-util-makeId",
    "body": [
      "export const makeId = (len) => {",
      "\tlet text = '';",
      "\tlet possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
      "\tfor(let i = 0; i < len; i += 1) {",
      "\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));",
      "\t}",
      "\treturn text;",
      "};"
    ],
    "description": "生成随机字符串"
  },
  "flattenArray": {
    "prefix": "gn-util-flatten-array",
    "body": [
      "export const deepFlatten = arr => [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)));"
    ],
    "description": "深度平铺一个数组"
  },
  "jscanvasapi": {
    "prefix": "gn-js-canvas-api",
    "body": [
      "const canvas = document.getElementById('canvas');",
      "if(!canvas.getContext) return;",
      "// 获得 2d 上下文对象",
      "const ctx = canvas.getContext('2d');",
      "// 栅格的起点为左上角，坐标为 (0,0) 。所有元素的位置都相对于原点来定位",
      "// 绘制矩形",
      "ctx.fillRect(x, y, width, height); // 绘制一个填充的矩形。",
      "ctx.strokeRect(x, y, width, height); // 绘制一个矩形的边框。",
      "ctx.clearRect(x, y, width, height); // 清除指定的矩形区域，然后这块区域会变的完全透明。",
      "",
      "// 使用路径绘制图形的步骤：1.创建路径起始点；2.调用绘制方法去绘制出路径；3.把路径封闭；4.一旦路径生成，通过描边或填充路径区域来渲染图形。",
      "// 新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径",
      "ctx.beginPath();",
      "// 把画笔移动到指定的坐标(x, y)。相当于设置路径的起始点坐标。",
      "ctx.moveTo(x, y);",
      "// 闭合路径之后，图形绘制命令又重新指向到上下文中",
      "ctx.closePath();",
      "// 通过线条来绘制图形轮廓",
      "ctx.stroke();",
      "// 通过填充路径的内容区域生成实心的图形",
      "ctx.fill();",
      "",
      "// 绘制圆弧，以(x, y) 为圆心，以r 为半径，从 startAngle 弧度开始到endAngle弧度结束。anticlosewise 是布尔值，true 表示逆时针，false 表示顺时针(默认是顺时针)",
      "ctx.arc(x, y, r, startAngle, endAngle, anticlockwise);",
      "// 角度转换成弧度",
      "// radians=(Math.PI/180)*degrees",
      "// 根据给定的控制点和半径画一段圆弧，最后再以直线连接两个控制点",
      "ctx.arcTo(x1, y1, x2, y2, radius);",
      "",
      "//绘制二次贝塞尔曲线,(cp1x, cp1y)控制点坐标,(x, y)结束点坐标",
      "ctx.quadraticCurveTo(cp1x, cp1y, x, y);",
      "ctx.stroke();",
      "//绘制三次贝塞尔曲线，(cp1x, cp1y)、(cp2x, cp2y)、(x, y)",
      "ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);",
      "ctx.stroke();",
      "",
      "// 一旦您设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值。",
      "// 如果你要给每个图形上不同的颜色，你需要重新设置 fillStyle 或 strokeStyle 的值。",
      "ctx.fillStyle = color; // 设置图形的填充颜色",
      "ctx.strokeStyle = color; // 设置图形的轮廓颜色",
      "",
      "// 透明度，建议使用rgba()进行设置",
      "// globalAlpha = transparencyValue",
      "",
      "// 线宽",
      "ctx.lineWidth = 10;",
      "// 线条末端样式，butt方形，round圆形，square方形+外凸圆形的高度",
      "ctx.lineCap = \"butt|round|square\";",
      "// 线条与线条间接合处的样式，连接区域：round扇形, bevel三角形 和 miter菱形",
      "ctx.lineJoin = \"round|bevel|miter\";",
      "",
      "// 用 setLineDash 方法和 lineDashOffset 属性来制定虚线样式。 ",
      "// setLineDash 方法接受一个数组，来指定线段与间隙的交替；lineDashOffset属性设置起始偏移量。",
      "ctx.setLineDash([20, 5]); // [实线长度, 间隙长度]",
      "ctx.lineDashOffset = -0; // 起始偏移量",
      "",
      "// 绘制文本",
      "ctx.font = \"100px sans-serif\"; // 文字样式",
      "ctx.textAlign = 'center'; // 文本对齐选项。 可选的值包括：start, end, left, right or center。 默认值是 start。",
      "ctx.textBaseline = 'middle'; // 基线对齐选项。可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。",
      "ctx.direction = 'inherit'; // 文本方向。可能的值包括：ltr, rtl, inherit。默认值是 inherit。",
      "ctx.fillText(\"text\", 10, 100);",
      "ctx.strokeText(\"text\", 10, 200)",
      "",
      "// 绘制图片",
      "var img = new Image();",
      "img.src = '';",
      "// 参数 1：要绘制的 img; 参数 2、3：绘制的 img 在 canvas 中的坐标",
      "ctx.drawImage(img,0,0);",
      "// 缩放图片，控制当前图像画入canvas时应该缩放的大小",
      "ctx.drawImage(image, x, y, width, height);",
      "// 切片，前 4 个是定义图像源的切片位置和大小，后 4 个则是定义切片的目标显示位置和大小",
      "ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);",
      "",
      "// 状态的保存和恢复",
      "// ​Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。",
      "// save方法(类似数组的 push())",
      "ctx.save();",
      "// 上一个保存的状态就从栈中弹出，所有设定都恢复(类似数组的 pop())",
      "ctx.restore(); ",
      "",
      "// translate(x,y) 用来移动 canvas 的原点到指定的位置，x 是左右偏移量，y 是上下偏移量",
      "ctx.translate(x,y);",
      "// rotate(angle) 顺时针方向的，以弧度为单位",
      "ctx.rotate(rad)",
      "// scale(x, y) 横轴和纵轴的缩放因子，它们都必须是正值",
      "ctx.scale(x,y);",
      "// transform 变形矩阵 3x3 [[a c e],[b d f],[0 0 1]]",
      "// Horizontal scaling,Horizontal skewing,Vertical skewing,Vertical scaling,Horizontal moving,Vertical moving",
      "ctx.transform(a,b,c,d,e,f);",
      "",
      "// 合成 ",
      "//  source-over 全局合成操作",
      "// source-in 仅显示新图像重叠区域",
      "// source-out 仅显示新图像未重叠的区域",
      "// source-atop 显示老图像及重叠的新图像区域（在上）",
      "//  destination-over 新图像会在老图像的下面",
      "// destination-in 仅显示老图像重叠区域，source-in",
      "// destination-out 仅显示老图像未重叠的区域，source-out",
      "// destination-atop 显示新图像及重叠的老图像区域（在上），source-atop",
      "//  lighter 新老图像都显示，但是重叠区域的颜色做加处理",
      "//  darken 保留重叠部分最黑的像素，比较颜色位",
      "//  lighten 保证重叠部分最亮的像素，比较颜色位",
      "//  xor 重叠部分会变成透明",
      "//  copy 只有新图像会被保留",
      "ctx.globalCompositeOperation = '';",
      "",
      "// 裁剪路径，把已经创建的路径转换成裁剪路径",
      "// clip() 只能遮罩在这个方法调用之后绘制的图像，如果是 clip() 方法调用之前绘制的图像，则无法实现遮罩。",
      "ctx.clip();",
      "",
      "// 动画",
      "",
      "// 1. 清空 canvas，清空所有最简单的做法就是 clearRect(x,y,w,h) 方法",
      "// 2. 保存 canvas 状态",
      "// 3. 绘制动画图形，动画帧",
      "// 4. 恢复 canvas 状态",
      "// 为了执行动画，我们需要一些可以定时执行重绘的方法",
      "// setInterval(), setTimeout(), requestAnimationFrame()"
    ],
    "description": "js canvas api"
  }
}

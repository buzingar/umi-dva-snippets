{
  "componentDidMount": {
    "prefix": "gn-lifecycle-cdm",
    "body": ["componentDidMount() {", "\t$0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "gn-lifecycle-scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentDidUpdate": {
    "prefix": "gn-lifecycle-cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "gn-lifecycle-cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "gn-lifecycle-gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {", "\t${1}", "}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gn-lifecycle-gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "allPropTypesFormat": {
    "prefix": "gn-react-proptypes",
    "body": [
      "// 特定的JS类型",
      "optionalArray: PropTypes.array,",
      "optionalBool: PropTypes.bool,",
      "optionalFunc: PropTypes.func,",
      "optionalNumber: PropTypes.number,",
      "optionalObject: PropTypes.object,",
      "optionalString: PropTypes.string,",
      "optionalSymbol: PropTypes.symbol,",
      "// 任何可以被渲染的元素",
      "optionalNode: PropTypes.node,",
      "// 指定类型为：一个react 元素",
      "optionalElement: PropTypes.element,",
      "// 某个类的实例",
      "optionalMessage: PropTypes.instanceOf(Message),",
      "// 指定枚举类型：你可以把属性限制在某些特定值之内",
      "optionalEnum: PropTypes.oneOf(['A', 'B']),",
      "// 指定多个类型：你也可以把属性类型限制在某些指定的类型范围内",
      "optionalUnion: PropTypes.oneOfType([",
      "\tPropTypes.string,",
      "\tPropTypes.number,",
      "\tPropTypes.instanceOf(Message)",
      "]),",
      "// 指定某个类型的数组",
      "optionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
      "// 指定类型为对象，且对象属性值是特定的类型",
      "optionalObjectOf: PropTypes.objectOf(PropTypes.number),",
      "// 指定类型为对象，且可以规定哪些属性必须有，哪些属性可以没有",
      "optionalObjectWithShape: PropTypes.shape({",
      "\toptionalProperty: PropTypes.string,",
      "\trequiredProperty: PropTypes.number.isRequired",
      "}),"
    ],
    "description": "all Prop-Types types, make quicker decisions"
  },
  "pureFunctionComponent": {
    "prefix": "gn-react-purefunc",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import PropTypes from 'prop-types';",
      "import { Button, Input } from 'antd';",
      "import styles from './index.less';",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "\t",
      "\t// const [value, setValue] = useState(null)",
      "\t",
      "\t// useEffect(()=>{// do something with value, return function cleanup(){}},[value])",
      "\t",
      "\tconst spinning = effects['[ns]/[modelEffect]'] || false;",
      "\t",
      "\treturn (",
      "\t\t<div className={styles.container}>",
      "\t\t\t<Spin spinning={spinning}>",
      "\t\t\t\t<div className={styles.content}>",
      "\t\t\t\t\t<div>many components here...</div>",
      "\t\t\t\t\t<div>$0$1$2</div>",
      "\t\t\t\t</div>",
      "\t\t\t</Spin>",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "// props type limit, The more detailed information, the better it will be.",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\toptions: PropTypes.array,",
      "}",
      "// default value 默认值",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "create pure function component"
  },
  "reactClassExportComponent": {
    "prefix": "gn-react-page-normal",
    "body": [
      "import React, { PureComponent } from 'react';",
      "import { connect } from 'dva';",
      "import { ConfigProvider, Spin, Button, Form, Select, Table, Modal, Row, Col, Input } from 'antd';",
      "// import zhCN from 'antd/es/locale/zh_CN';",
      "// import PropTypes from 'prop-types';",
      "",
      "import styles from './${1:${TM_FILENAME_BASE}}.less';",
      "",
      "@connect(({ demo, loading }) => ({ demoData: demo, loadingData: loading }))",
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\t// 不需要可以先注释，建议进行类型检查",
      "\tstatic propTypes = {",
      "\t\t// gn-props -> generate all template props",
      "\t}",
      "",
      "\tstatic defaultProps = {",
      "\t\t// key: 'value'",
      "\t}",
      "",
      "\tstate = {",
      "\t\t// key: 'value'",
      "\t}",
      "",
      "\tcomponentDidMount() {",
      "\t\tconst { dispatch } = this.props;",
      "\t\tdispatch({",
      "\t\t\ttype:'demoData/getDemoList',",
      "\t\t\tpayload: {}",
      "\t\t}).then(res => {",
      "\t\t\tif(res) {",
      "\t\t\t\tconsole.log('res:', res)",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "",
      "\t// need shouldComponentUpdate? type & enter gn-scu",
      "",
      "\t// need componentDidUpdate? type & enter gn-cdup",
      "",
      "\t// need componentWillUnmount? type & enter gn-cwun",
      "",
      "\trender() {",
      "\t\t// const { key } = this.state;",
      "\t\tconst { loadingData } = this.props;",
      "\t\tconst { effects } = loadingData;",
      "\t\t",
      "\t\t// 此处注意替换",
      "\t\tconst spinning = effects['demoData/getDemoList'] || false;",
      "\t\t",
      "\t\treturn (",
      "\t\t\t<div className={styles.container}>",
      "\t\t\t\t<Spin spinning={spinning}>",
      "\t\t\t\t\t<div className={styles.content}>",
      "\t\t\t\t\t\t<div>many components here...</div>",
      "\t\t\t\t\t\t<div>$0$1$2</div>",
      "\t\t\t\t\t</div>",
      "\t\t\t\t</Spin>",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a React component class with ES7 module system && umi && dva && antd"
  },
  "dvaModels": {
    "prefix": "gn-react-model-normal",
    "body": [
      "// import { message } from 'antd';",
      "import { getDemoList /* , methodNames */} from '../services/${1:${TM_FILENAME_BASE}}';",
      "",
      "const initData = {",
      "\tkey: 'value'",
      "};",
      "",
      "export default {",
      "\tnamespace: '${1:${TM_FILENAME_BASE}}',",
      "\tstate: {",
      "\t\t...initData",
      "\t},",
      "\teffects: {",
      "\t\t*getDemoList({ payload }, { call, put /* , select */ }) {",
      "\t\t\t// const model = yield select(state => state.${1:${TM_FILENAME_BASE}});",
      "\t\t\t",
      "\t\t\tconst resData = yield call(getDemoList, payload);",
      "\t\t\t",
      "\t\t\tconst { errCode, data } = resData;",
      "\t\t\tif (errCode === 0) {",
      "\t\t\t\tyield put({",
      "\t\t\t\t\ttype: 'updateModel',",
      "\t\t\t\t\tpayload: {",
      "\t\t\t\t\t\tdata: data",
      "\t\t\t\t\t}",
      "\t\t\t\t})",
      "\t\t\t}",
      "\t\t\treturn resData;",
      "\t\t}",
      "\t},",
      "\treducers: {",
      "\t\tupdateModel: (state, { payload }) => ({",
      "\t\t\t...state,",
      "\t\t\t...payload",
      "\t\t}),",
      "\t\tclearData: () => ({ ...initData })",
      "\t},",
      "\t//subscriptions: {",
      "\t//\tsetup({ dispatch, history }) {",
      "\t//\t\treturn history.listen(({ pathname }) => {",
      "\t//\t\t\tif( pathname && pathname === '/' ) {",
      "\t//\t\t\t\t// do something when app init",
      "\t//\t\t\t\tdispatch({",
      "\t//\t\t\t\t\ttype: '',",
      "\t//\t\t\t\t\tpayload: {}",
      "\t//\t\t\t\t})",
      "\t//\t\t\t}",
      "\t//\t\t})",
      "\t//\t}",
      "\t//}",
      "}"
    ],
    "description": "create models"
  },
  "dvaServices": {
    "prefix": "gn-react-service-normal",
    "body": [
      "import { post, get } from '@ali-whale/fetch-web';",
      "",
      "export const getDemoList = data => get(`/path/\\${data}`);",
      "export const update = data => post('/path', data);",
      ""
    ],
    "description": "create services"
  }
}

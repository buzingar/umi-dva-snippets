{
  "import": {
    "prefix": "zz-imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "zz-imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "import PropTypes": {
    "prefix": "zz-impt",
    "body": ["import PropTypes from 'prop-types'", ""]
  },
  "exportDefault": {
    "prefix": "zz-exp",
    "body": "export default $1$0"
  },
  "forEach": {
    "prefix": "zz-foreach",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "map": {
    "prefix": "zz-map",
    "body": ["${1:array}.map(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "destructProps": {
    "prefix": "zz-cp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "zz-cs",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "consoleLog": {
    "prefix": "zz-clg",
    "body": "console.log('data:', ${1:object})",
    "description": "Displays a message in the console"
  },
  "componentDidMount": {
    "prefix": "zz-lifecycle-cdm",
    "body": ["componentDidMount() {", "\t$0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "zz-lifecycle-scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentDidUpdate": {
    "prefix": "zz-lifecycle-cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "zz-lifecycle-cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "zz-lifecycle-gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {", "\t${1}", "}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "zz-lifecycle-gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "checkZhCNName": {
    "prefix": "zz-checkZhName",
    "body": [
      "export const checkName = (name, pattern, msg) => {",
      "\tlet ptn = pattern || /^[\\u4E00-\\u9FA5\\uf900-\\ufa2d·\\s\\w]{2,64}$/;",
      "\tconst result = ptn.test(name);",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check zh-cn names pattern"
  },
  "checkPhone": {
    "prefix": "zz-checkPhone",
    "body": [
      "export const checkPhone = (phone, msg) => {",
      "\tconst pattern = /^1[3456789]d{9}$/;",
      "\tconst result = pattern.test(phone)",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check cn phone pattern"
  },
  "checkSelfPattern": {
    "prefix": "zz-checkSelfPattern",
    "body": [
      "export const checkVal = (val, pattern, msg) => {",
      "\tconst result = pattern.test(val)",
      "\tif (!result && msg) {",
      "\t\tthrow msg;",
      "\t}",
      "\treturn result;",
      "}"
    ],
    "description": "check with user provides pattern"
  },
  "checkId": {
    "prefix": "zz-checkIdNo",
    "body": [
      "export const checkCode = (val, msg) => {",
      "\tvar p = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;",
      "\tvar factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];",
      "\tvar parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];",
      "\tvar code = val.substring(17);",
      "",
      "\tif (p.test(val)) {",
      "\t\tvar sum = 0;",
      "\t\tfor (var i = 0; i < 17; i++) {",
      "\t\t\tsum += val[i] * factor[i];",
      "\t\t}",
      "\t\tif (parity[sum % 11] == code.toUpperCase()) {",
      "\t\t\treturn true;",
      "\t\t}",
      "\t}",
      "",
      "\tif (msg) {",
      "\t\tthrow msg;",
      "\t}",
      "",
      "\treturn false;",
      "}"
    ],
    "description": "check chinese IdNo"
  },
  "checkEmptyOrBeyond": {
    "prefix": "zz-checkEmptyOrBeyond",
    "body": [
      "export const checkEmptyOrBeyond = (val, msg, maxLen) => {",
      "\tif (val) {",
      "\t\tif (maxLen && isNaN(+maxLen)) {",
      "\t\t\tthrow 'The third argument is not a NUMBER.'",
      "\t\t}",
      "\t\tif (val.trim() === '' || (maxLen && val.length > +maxLen)) {",
      "\t\t\tif (msg) {",
      "\t\t\t\tthrow msg;",
      "\t\t\t}",
      "\t\t\treturn true;",
      "\t\t}",
      "\t\treturn false;",
      "\t}",
      "\tthrow msg;",
      "}"
    ],
    "description": ""
  },
  "debounce": {
    "prefix": "zz-debounce",
    "body": [
      "export const debounce = (func, wait, immediate = true) => {",
      "\tlet timeout;",
      "\t",
      "\treturn function () {",
      "\t\tlet context = this;",
      "\t\tlet args = arguments;",
      "\t\t",
      "\t\tif (timeout) clearTimeout(timeout);",
      "\t\tif (immediate) {",
      "\t\t\tconst callNow = !timeout;",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\ttimeout = null;",
      "\t\t\t}, wait);",
      "\t\t\tif (callNow) func.apply(context, args);",
      "\t\t} else {",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\tfunc.apply(context, args);",
      "\t\t\t}, wait);",
      "\t\t}",
      "\t};",
      "};"
    ],
    "description": "debounce immediate or delay"
  },
  "throttle": {
    "prefix": "zz-throttle",
    "body": [
      "export const throttle = (func, wait , type) => {",
      "\tlet previous = 0;",
      "\tlet timeout;",
      "",
      "\treturn function() {",
      "\t\tlet context = this;",
      "\t\tlet args = arguments;",
      "",
      "\t\tif (type === 'timestamp') {",
      "\t\t\tlet now = Date.now();",
      "\t\t\tif (now - previous > wait) {",
      "\t\t\t\tfunc.apply(context, args);",
      "\t\t\t\tprevious = now;",
      "\t\t\t}",
      "\t\t\treturn;",
      "\t\t}",
      "",
      "\t\tif (!timeout) {",
      "\t\t\ttimeout = setTimeout(() => {",
      "\t\t\t\ttimeout = null;",
      "\t\t\t\tfunc.apply(context, args)",
      "\t\t\t}, wait)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "throttle timestamp or interval"
  },
  "packScript": {
    "prefix": "zz-pack",
    "body": [
      "// make sure the dir which the file in is sibling with src",
      "const fs = require('fs');",
      "const path = require('path');",
      "const tar = require('tar');",
      "const pkg = require('../package');",
      "const umirc = require('../.umirc');",
      "",
      "const distName = `${pkg.name}.tar.gz`;",
      "const outputPath = path.resolve(process.cwd(), umirc.outputPath || './dist');",
      "",
      "tar.c({ gzip: true, cwd: outputPath }, fs.readdirSync(outputPath))",
      "\t.pipe(fs.createWriteStream(distName))",
      "\t.on('finish', () => {",
      "\t\tconst openPath = path.resolve(process.cwd());",
      "\t\tconsole.log(`打包完成，快速打开包所在目录请执行命令：open ${openPath}`);",
      "\t});"
    ],
    "description": "pack script"
  },
  "maxItemOfArray": {
    "prefix": "zz-maxInArray",
    "body": [
      "export const maxItem = arr => Math.max(...arr);",
      "export const maxItemOfArray = arr => arr.sort((a, b) => b - a)[0];"
    ],
    "description": "获取数组中的最大数字"
  },
  "areAllEqual": {
    "prefix": "zz-arrayItemEqual",
    "body": [
      "export const areAllEqual = array => array.every(item => item === array[0]);"
    ],
    "description": "检查数组的所有项是否相等"
  },
  "averageOf": {
    "prefix": "zz-average",
    "body": [
      "export const averageOf = (…numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;"
    ],
    "description": "求给定数字的平均值"
  },
  "reverseString": {
    "prefix": "zz-reverse",
    "body": ["export const reverseString = str => […str].reverse().join('');"],
    "description": "反转一个字符串"
  },
  "sumOf": {
    "prefix": "zz-sum",
    "body": [
      "export const sumOf = (…numbers) => numbers.reduce((a, b) => a + b, 0);"
    ],
    "description": "求给定数字的和"
  },
  "findAndReplace": {
    "prefix": "zz-replaceStr",
    "body": [
      "export const findAndReplace = (string, wordToFind, wordToReplace) => string.split(wordToFind).join(wordToReplace);"
    ],
    "description": "在字符串中查找给定的单词，并替换为另一个单词"
  },
  "RGBToHex": {
    "prefix": "zz-transcolor",
    "body": [
      "export const RGBToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');"
    ],
    "description": "将RGB模式下的颜色转换为十六进制"
  },
  "shuffle": {
    "prefix": "zz-shuffle",
    "body": [
      "export const shuffle = ([…array]) => {",
      "\t let m = array.length;",
      "",
      "\t while(m){",
      "\t\t const i = Math.floor(Math.random() * m);",
      "\t\t [array[m], array[i]] = [array[i], array[m]]",
      "\t }",
      "\t return array",
      "};"
    ],
    "description": "随机播放播放项目"
  },
  "removeFalseValues": {
    "prefix": "zz-rmFalseVal",
    "body": [
      "export const removeFalseValues = arr => arr.filter(item => item);"
    ],
    "description": "从数组中删除false值，包括false，undefined，NaN，empty"
  },
  "removeDuplicatedValues": {
    "prefix": "zz-rmDuplicatedVal",
    "body": [
      "export const removeDuplicatedValues = array => […new Set(array)];"
    ],
    "description": "从数组中删除重复的项"
  },
  "getTimeFromDate": {
    "prefix": "zz-time",
    "body": [
      "export const getTimeFromDate = date => date.toTimeString().slice(0, 8);"
    ],
    "description": "以日期对象的字符串形式返回时间"
  },
  "capitalizeAllWords": {
    "prefix": "zz-capitalize",
    "body": [
      "export const capitalizeAllWords = str => str.replace(/\b[a-z]/g, char => char.toUpperCase());"
    ],
    "description": "将字符串中所有单词的第一个字母大写"
  },
  "getDayDiff": {
    "prefix": "zz-getDayDiff",
    "body": [
      "export const getDayDiff = (date1, date2) => ((date2 - date1) / (1000 * 3600 * 24));"
    ],
    "description": "返回两个日期之间以天为单位的差值"
  },
  "radianToDegree": {
    "prefix": "zz-radianToDegree",
    "body": [
      "export const radianToDegree = radian => (radian * 180.0) / Math.PI;"
    ],
    "description": "把弧度转换成角度"
  },
  "isValidJSON": {
    "prefix": "zz-valid-json",
    "body": [
      "export const isValidJSON = string => {",
      "\t try {",
      "\t\t JSON.parse(string);",
      "\t\t return true;",
      "\t } catch (error) {",
      "\t\t return false",
      "\t }",
      "}"
    ],
    "description": "检查给定字符串是否是有效的JSON"
  },
  "toWords": {
    "prefix": "zz-toWords",
    "body": [
      "export const toWords = (string, pattern = /[^a-zA-Z-]+/) => string.split(pattern).filter(item => item);"
    ],
    "description": "将给定的字符串转换为单词数组"
  },
  "scrollToTop": {
    "prefix": "zz-scrollToTop",
    "body": [
      "const scrollToTop = () => {",
      "\tconst t = document.documentElement.scrollTop || document.body.scrollTop;",
      "\tif (t > 0) {",
      "\t\twindow.requestAnimationFrame(scrollToTop);",
      "\t\twindow.scrollTo(0, t — t / 8);",
      "\t}",
      "};"
    ],
    "description": "位于长页面的底部，并且想快速向上滚动至顶部"
  },
  "isValidNumber": {
    "prefix": "zz-isValidNumber",
    "body": [
      "export const isValidNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) === n;"
    ],
    "description": "验证数字是否有效"
  },
  "makeId": {
    "prefix": "zz-makeId",
    "body": [
      "export const makeId = (len) => {",
      "\tlet text = '';",
      "\tlet possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
      "\tfor(let i = 0; i < len; i += 1) {",
      "\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));",
      "\t}",
      "\treturn text;",
      "};"
    ],
    "description": "生成随机字符串"
  },
  "flattenArray": {
    "prefix": "zz-flatten-array",
    "body": [
      "export const deepFlatten = arr => [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)));"
    ],
    "description": "深度平铺一个数组"
  },
  "allPropTypesFormat": {
    "prefix": "zz-proptypes",
    "body": [
      "// 特定的JS类型",
      "optionalArray: PropTypes.array,",
      "optionalBool: PropTypes.bool,",
      "optionalFunc: PropTypes.func,",
      "optionalNumber: PropTypes.number,",
      "optionalObject: PropTypes.object,",
      "optionalString: PropTypes.string,",
      "optionalSymbol: PropTypes.symbol,",
      "// 任何可以被渲染的元素",
      "optionalNode: PropTypes.node,",
      "// 指定类型为：一个react 元素",
      "optionalElement: PropTypes.element,",
      "// 某个类的实例",
      "optionalMessage: PropTypes.instanceOf(Message),",
      "// 指定枚举类型：你可以把属性限制在某些特定值之内",
      "optionalEnum: PropTypes.oneOf(['A', 'B']),",
      "// 指定多个类型：你也可以把属性类型限制在某些指定的类型范围内",
      "optionalUnion: PropTypes.oneOfType([",
      "\tPropTypes.string,",
      "\tPropTypes.number,",
      "\tPropTypes.instanceOf(Message)",
      "]),",
      "// 指定某个类型的数组",
      "optionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
      "// 指定类型为对象，且对象属性值是特定的类型",
      "optionalObjectOf: PropTypes.objectOf(PropTypes.number),",
      "// 指定类型为对象，且可以规定哪些属性必须有，哪些属性可以没有",
      "optionalObjectWithShape: PropTypes.shape({",
      "\toptionalProperty: PropTypes.string,",
      "\trequiredProperty: PropTypes.number.isRequired",
      "}),"
    ],
    "description": "all Prop-Types types, make quicker decisions"
  },
  "pureFunctionComponent": {
    "prefix": "zz-purefunc",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import PropTypes from 'prop-types';",
      "import { Button, Input } from 'antd';",
      "import styles from './index.less';",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "\t",
      "\t// const [value, setValue] = useState(null)",
      "\t",
      "\t// useEffect(()=>{// do something with value, return function cleanup(){}},[value])",
      "\t",
      "\tconst spinning = effects['[ns]/[modelEffect]'] || false;",
      "\t",
      "\treturn (",
      "\t\t<div className={styles.container}>",
      "\t\t\t<Spin spinning={spinning}>",
      "\t\t\t\t<div className={styles.content}>",
      "\t\t\t\t\t<div>many components here...</div>",
      "\t\t\t\t\t<div>$0$1$2</div>",
      "\t\t\t\t</div>",
      "\t\t\t</Spin>",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "// props type limit, The more detailed information, the better it will be.",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\toptions: PropTypes.array,",
      "}",
      "// default value 默认值",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "create pure function component"
  },
  "reactClassExportComponent": {
    "prefix": "zz-page-normal",
    "body": [
      "import React, { PureComponent } from 'react';",
      "import { connect } from 'dva';",
      "import { ConfigProvider, Spin, Button, Form, Select, Table, Modal, Row, Col, Input } from 'antd';",
      "// import zhCN from 'antd/es/locale/zh_CN';",
      "// import PropTypes from 'prop-types';",
      "",
      "import styles from './${1:${TM_FILENAME_BASE}}.less';",
      "",
      "@connect(({ demo, loading }) => ({ demoData: demo, loadingData: loading }))",
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\t// 不需要可以先注释，建议进行类型检查",
      "\tstatic propTypes = {",
      "\t\t// zz-props -> generate all template props",
      "\t}",
      "",
      "\tstatic defaultProps = {",
      "\t\t// key: 'value'",
      "\t}",
      "",
      "\tstate = {",
      "\t\t// key: 'value'",
      "\t}",
      "",
      "\tcomponentDidMount() {",
      "\t\tconst { dispatch } = this.props;",
      "\t\tdispatch({",
      "\t\t\ttype:'demoData/getDemoList',",
      "\t\t\tpayload: {}",
      "\t\t}).then(res => {",
      "\t\t\tif(res) {",
      "\t\t\t\tconsole.log('res:', res)",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "",
      "\t// need shouldComponentUpdate? type & enter zz-scu",
      "",
      "\t// need componentDidUpdate? type & enter zz-cdup",
      "",
      "\t// need componentWillUnmount? type & enter zz-cwun",
      "",
      "\trender() {",
      "\t\t// const { key } = this.state;",
      "\t\tconst { loadingData } = this.props;",
      "\t\tconst { effects } = loadingData;",
      "\t\t",
      "\t\t// 此处注意替换",
      "\t\tconst spinning = effects['demoData/getDemoList'] || false;",
      "\t\t",
      "\t\treturn (",
      "\t\t\t<div className={styles.container}>",
      "\t\t\t\t<Spin spinning={spinning}>",
      "\t\t\t\t\t<div className={styles.content}>",
      "\t\t\t\t\t\t<div>many components here...</div>",
      "\t\t\t\t\t\t<div>$0$1$2</div>",
      "\t\t\t\t\t</div>",
      "\t\t\t\t</Spin>",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a React component class with ES7 module system && umi && dva && antd"
  },
  "dvaModels": {
    "prefix": "zz-model-normal",
    "body": [
      "// import { message } from 'antd';",
      "import { getDemoList /* , methodNames */} from '../services/${1:${TM_FILENAME_BASE}}';",
      "",
      "const initData = {",
      "\tkey: 'value'",
      "};",
      "",
      "export default {",
      "\tnamespace: '${1:${TM_FILENAME_BASE}}',",
      "\tstate: {",
      "\t\t...initData",
      "\t},",
      "\teffects: {",
      "\t\t*getDemoList({ payload }, { call, put /* , select */ }) {",
      "\t\t\t// const model = yield select(state => state.${1:${TM_FILENAME_BASE}});",
      "\t\t\t",
      "\t\t\tconst resData = yield call(getDemoList, payload);",
      "\t\t\t",
      "\t\t\tconst { errCode, data } = resData;",
      "\t\t\tif (errCode === 0) {",
      "\t\t\t\tyield put({",
      "\t\t\t\t\ttype: 'updateModel',",
      "\t\t\t\t\tpayload: {",
      "\t\t\t\t\t\tdata: data",
      "\t\t\t\t\t}",
      "\t\t\t\t})",
      "\t\t\t}",
      "\t\t\treturn resData;",
      "\t\t}",
      "\t},",
      "\treducers: {",
      "\t\tupdateModel: (state, { payload }) => ({",
      "\t\t\t...state,",
      "\t\t\t...payload",
      "\t\t}),",
      "\t\tclearData: () => ({ ...initData })",
      "\t},",
      "\t//subscriptions: {",
      "\t//\tsetup({ dispatch, history }) {",
      "\t//\t\treturn history.listen(({ pathname }) => {",
      "\t//\t\t\tif( pathname && pathname === '/' ) {",
      "\t//\t\t\t\t// do something when app init",
      "\t//\t\t\t\tdispatch({",
      "\t//\t\t\t\t\ttype: '',",
      "\t//\t\t\t\t\tpayload: {}",
      "\t//\t\t\t\t})",
      "\t//\t\t\t}",
      "\t//\t\t})",
      "\t//\t}",
      "\t//}",
      "}"
    ],
    "description": "create models"
  },
  "dvaServices": {
    "prefix": "zz-service-normal",
    "body": [
      "import { post, get } from '@ali-whale/fetch-web';",
      "",
      "export const getDemoList = data => get(`/path/\\${data}`);",
      "export const update = data => post('/path', data);",
      ""
    ],
    "description": "create services"
  }
}

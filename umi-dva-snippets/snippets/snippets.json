{
  "import": {
    "prefix": "zz-imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "zz-imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "import PropTypes": {
    "prefix": "zz-impt",
    "body": ["import PropTypes from 'prop-types'", ""]
  },
  "exportDefault": {
    "prefix": "zz-exp",
    "body": "export default $1$0"
  },
  "forEach": {
    "prefix": "zz-fre",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "map": {
    "prefix": "zz-map",
    "body": ["${1:array}.map(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a map statement in ES7 syntax"
  },
  "destructProps": {
    "prefix": "zz-cp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "zz-cs",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "consoleLog": {
    "prefix": "zz-clg",
    "body": "console.log('data:', ${1:object})",
    "description": "Displays a message in the console"
  },
  "componentDidMount": {
    "prefix": "zz-cdm",
    "body": ["componentDidMount() {", "\t$0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "zz-scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentDidUpdate": {
    "prefix": "zz-cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "zz-cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "zz-gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {", "\t${1}", "}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "zz-gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "reactClassExportComponent": {
    "prefix": "zz-page-normal",
    "body": [
      "import React, { Component } from 'react';",
      "import { connect } from 'dva';",
      "import { ConfigProvider, Spin } from 'antd';",
      "import zhCN from 'antd/es/locale/zh_CN';",
      "import PropTypes from 'prop-types';",
      "",
      "import styles from './${1:${TM_FILENAME_BASE}}.less';",
      "",
      "@connect(({ demo, loading }) => ({ demoData: demo, loadingData: loading }))",
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\t// 不需要可以先注释，建议进行类型检查",
      "\tstatic propTypes = {",
      "\t\t// 特定的JS类型",
      "\t\toptionalArray: PropTypes.array,",
      "\t\toptionalBool: PropTypes.bool,",
      "\t\toptionalFunc: PropTypes.func,",
      "\t\toptionalNumber: PropTypes.number,",
      "\t\toptionalObject: PropTypes.object,",
      "\t\toptionalString: PropTypes.string,",
      "\t\toptionalSymbol: PropTypes.symbol,",
      "\t\t// 任何可以被渲染的元素",
      "\t\toptionalNode: PropTypes.node,",
      "\t\t// 指定类型为：一个react 元素",
      "\t\toptionalElement: PropTypes.element,",
      "\t\t// 某个类的实例",
      "\t\toptionalMessage: PropTypes.instanceOf(Message),",
      "\t\t// 指定枚举类型：你可以把属性限制在某些特定值之内",
      "\t\toptionalEnum: PropTypes.oneOf(['A', 'B']),",
      "\t\t// 指定多个类型：你也可以把属性类型限制在某些指定的类型范围内",
      "\t\toptionalUnion: PropTypes.oneOfType([",
      "\t\t\tPropTypes.string,",
      "\t\t\tPropTypes.number,",
      "\t\t\tPropTypes.instanceOf(Message)",
      "\t\t]),",
      "\t\t// 指定某个类型的数组",
      "\t\toptionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
      "\t\t// 指定类型为对象，且对象属性值是特定的类型",
      "\t\toptionalObjectOf: PropTypes.objectOf(PropTypes.number),",
      "\t\t// 指定类型为对象，且可以规定哪些属性必须有，哪些属性可以没有",
      "\t\toptionalObjectWithShape: PropTypes.shape({",
      "\t\t\toptionalProperty: PropTypes.string,",
      "\t\t\trequiredProperty: PropTypes.number.isRequired",
      "\t\t}),",
      "\t}",
      "",
      "\tstatic defaultProps = {",
      "\t\tkey: 'value'",
      "\t}",
      "",
      "\tstate = {",
      "\t\tkey: 'value'",
      "\t}",
      "",
      "\tcomponentDidMount() {",
      "\t\tconst { dispatch } = this.props;",
      "\t\tdispatch({",
      "\t\t\ttype:'demoData/getDemoList',",
      "\t\t\tpayload: {}",
      "\t\t}).then(res => {",
      "\t\t\tif(res) {",
      "\t\t\t\tconsole.log('res:', res)",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "",
      "\t// need shouldComponentUpdate type&enter zz-scu",
      "",
      "\t// need componentDidUpdate type&enter zz-cdup",
      "",
      "\t// need componentWillUnmount type&enter zz-cwun",
      "",
      "\trender() {",
      "\t\tconst { key } = this.state;",
      "\t\tconst { loadingData } = this.props;",
      "\t\tconst { effects } = loadingData;",
      "\t\t",
      "\t\t// 此处注意替换",
      "\t\tconst spinning = effects['demoData/getDemoList'] || false;",
      "\t\t",
      "\t\treturn (",
      "\t\t\t<ConfigProvider locale={zhCN}>",
      "\t\t\t\t<Spin spinning={spinning}>",
      "\t\t\t\t\t<div className={styles.root}>",
      "\t\t\t\t\t\tmany components here...",
      "\t\t\t\t\t\t$0$1$2",
      "\t\t\t\t\t</div>",
      "\t\t\t\t</Spin>",
      "\t\t\t</ConfigProvider>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a React component class with ES7 module system && umi && dva && antd"
  },
  "dvaModels": {
    "prefix": "zz-model-normal",
    "body": [
      "// import { message } from 'antd';",
      "import { getDemoList /* , methodNames */} from '../services/${1:${TM_FILENAME_BASE}}';",
      "",
      "const initData = {",
      "\tkey: 'value'",
      "};",
      "",
      "export default {",
      "\tnamespace: '${1:${TM_FILENAME_BASE}}Model',",
      "\tstate: {",
      "\t\t...initData",
      "\t},",
      "\teffects: {",
      "\t\t*getDemoList({ payload }, { call, put /* , select */ }) {",
      "\t\t\t// const model = yield select(state => state.${1:${TM_FILENAME_BASE}});",
      "\t\t\t",
      "\t\t\tconst resData = yield call(getDemoList, payload);",
      "\t\t\t",
      "\t\t\tconst { errCode, data } = resData;",
      "\t\t\tif (errCode === 0) {",
      "\t\t\t\tyield put({",
      "\t\t\t\t\ttype: 'updateModel',",
      "\t\t\t\t\tpayload: {",
      "\t\t\t\t\t\tdata: data",
      "\t\t\t\t\t}",
      "\t\t\t\t})",
      "\t\t\t}",
      "\t\t\treturn resData;",
      "\t\t}",
      "\t},",
      "\treducers: {",
      "\t\tupdateModel: (state, { payload }) => ({",
      "\t\t\t...state,",
      "\t\t\t...payload",
      "\t\t}),",
      "\t\tclearData: () => ({ ...initData })",
      "\t},",
      "\t//subscriptions: {",
      "\t//\tsetup({ dispatch, history }) {",
      "\t//\t\treturn history.listen(({ pathname }) => {",
      "\t//\t\t\tif( pathname && pathname === '/' ) {",
      "\t//\t\t\t\t// do something when app init",
      "\t//\t\t\t\tdispatch({",
      "\t//\t\t\t\t\ttype: '',",
      "\t//\t\t\t\t\tpayload: {}",
      "\t//\t\t\t\t})",
      "\t//\t\t\t}",
      "\t//\t\t})",
      "\t//\t}",
      "\t//}",
      "}"
    ],
    "description": "create models"
  },
  "dvaServices": {
    "prefix": "zz-service-normal",
    "body": [
      "import { post, get } from '@ali-whale/fetch-web';",
      "",
      "export const getDemoList = data => get(`/path/\\${data}`);",
      "export const update = data => post('/path', data);",
      ""
    ],
    "description": "create services"
  }
}
